/*
 * main.cpp
 *
 *  Created on: Mar 30, 2014
 *      Author: Jing, Aditya
 */

#include <stdio.h>
#include <math.h>
#include <fstream>
#include <GL/glut.h>
#include <iostream>
#include <stdarg.h>
#include <stdlib.h>


#include "../Header Files/Block.h"
#include "../Header Files/Scene.h"
#include "../Header Files/VRPNClient.h"
#include "../Header Files/inputWii.h"
//#include "WinUser.h"

#define NUM_BLOCKS 2
#define PI 3.1459


//Block::BlockList list;//[NUM_BLOCKS];

double x_pos, y_pos, z_pos;


vec3 initialPos[NUM_BLOCKS];


double alpha;
double x_point;
double y_point;
double z_point;

//void rotateView(double dest, double inc);

class GlutWindow{
   int width;
   int height;
   char* title;
   float fieldOfViewAngle;
   float z_near;
   float z_far;
   public:
      GlutWindow(): width(640),height(480),title("Djenga"),fieldOfViewAngle(45),z_near(1.0f),z_far(-1.0f){
      }
};


//UI helpers
int theButtonState = 0;

bool isRunning = true;

void onTimerCb(int value)
{
 
 
 VClient.readData();
 x_pos = 2*VClient.getXData();
 y_pos = 2*(VClient.getYData()*sin(0.263) - VClient.getZData()*cos(0.263));
 z_pos = 2*(VClient.getZData()*sin(0.263) + VClient.getYData()*cos(0.263));
 
 theButtonState = 0;//Wii.GetButtonId();
  

 if (theButtonState == 8){
 	for (int i=0; i< 2;i++){
		if (Blocks[i].IsInside(x_point, y_point, z_point)){
			Blocks[i].held_flag = 1;

		}
		else{
			Blocks[i].held_flag = 0;
		}
 	}
 }
 else{
 	for (int i=0; i< 2;i++){
		
		Blocks[i].held_flag = 0;
		
 	}
 }
 if (theButtonState == 512)
 {
	alpha = alpha + 10;
 }
 if (theButtonState == 256)
 {
	alpha = alpha - 10;
 }

 x_point = x_pos*cos(alpha*PI/180) + z_pos*sin(alpha*PI/180);
 y_point = y_pos;
 z_point = z_pos*cos(alpha*PI/180) - x_pos*sin(alpha*PI/180);
 glutTimerFunc(100,onTimerCb,0);

 for (int i = 0; i < NUM_BLOCKS; i++){		
 	if(isRunning)
 	{
	 Blocks[i].Update(0.01, theScene);
 	}
}

 glutPostRedisplay();

}

/*
void onDrawCb()
{

    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();
    glTranslatef(0.0f,0.0f,-3.0f);
    glRotatef(alpha,0,1,0);
    

        theScene.Draw(win.z_near-win.z_far,2);

        for(int i=0;i<NUM_BLOCKS;i++)
        {
	Blocks[i].Draw(Blocks[i].updateCenter(Blocks[i].m_vparticles));    //give initial coordinates
	}

        glColor3f(1.0f,0.0f,0.0f);
	glPointSize(5.0f);
	glBegin(GL_POINTS);
	glVertex3f(x_point,y_point,z_point);
	
	glEnd();
	//glutSwapBuffers();

	glutSwapBuffers();

}
*/

/*
void init(void)
{


	    glMatrixMode(GL_PROJECTION);												// select projection matrix
	    glViewport(0, 0, win.width, win.height);									// set the viewport
	    glMatrixMode(GL_PROJECTION);												// set matrix mode
	    glLoadIdentity();															// reset projection matrix
	    GLfloat aspect = (GLfloat) win.width / win.height;

	    gluPerspective(win.field_of_view_angle, aspect, win.z_near, win.z_far);		// set up a perspective projection matrix
	    glMatrixMode(GL_MODELVIEW);								// specify which matrix is the current matrix
	    glShadeModel( GL_SMOOTH );
	    glClearDepth( 1.0f );								// specify the clear value for the depth buffer
	    glEnable( GL_DEPTH_TEST );
	    glDepthFunc( GL_LEQUAL );
	    glHint( GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST );						// specify implementation-specific hints
            glClearColor(0.0, 0.0, 0.0, 1.0);											// specify clear values for the color buffers


}
*/

/*
void initBlocks()
{
	initialPos[0] = vec3(0.2, 0.0 , 0.0);
	initialPos[1] = vec3(0.5, 1.0 , 0.0);
	//initialPos[2] = vec3(-0.4, 1.0 , 0.0);
	//initialPos[3] = vec3(0, 0.25 , 0);
	//initialPos[4] = vec3(0.5, 0 , 0);
	//initialPos[5] = vec3(0.5, 1 , 0);
  	for (int i = 0; i < NUM_BLOCKS; i++){
      		Blocks[i].InitBlock(initialPos[i], 0.5, 0.5, 0.5);
      		Blocks[i].SetBlockIndex(i);
     	 	Block::AddToList(&Blocks[i]);
      	}
}

*/

int main(int argc, char **argv)
{
   GlutWindow win;
   VRPNClient VClient;
   //InputWii Wii("00:17:AB:39:4E:C5");
   Scene theScene;
   Block Blocks[NUM_BLOCKS];
   VClient.connectToServer("Wand@158.130.62.115:3883");
   Graphics graphics(win,Blocks,VClient,theScene); //TODO: add Wii also as a parameter	   
	    //printf("hello world");
	   /* initBlocks();

	    glutInit(&argc, argv);
	    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH);
	    
	    glutInitWindowSize(win.width,win.height);
	    glutInitWindowPosition(100, 100);
	    glutCreateWindow("BlockSim!!");
	    glutDisplayFunc(onDrawCb);
	    glutTimerFunc(100, onTimerCb, 0);
	    init();

	    glutMainLoop();
	*/
	    return 0;

}
	

